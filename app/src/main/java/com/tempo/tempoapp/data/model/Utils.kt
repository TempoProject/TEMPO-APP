package com.tempo.tempoapp.data.model

import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.PrimaryKey

/**
 * Entity class representing utility information in the database.
 *
 * @property id The unique identifier of the utility record, auto-generated by the database.
 * @property latestUpdate The timestamp of the latest update of the call to health connect, nullable.
 */
@Entity(tableName = "utils")
data class Utils(
    @PrimaryKey(autoGenerate = true)
    val id: Int = 0,
    @ColumnInfo(name = "latest_update")
    val latestUpdate: Long?
)

/**
 * Entity class representing a Movesense device in the database.
 *
 * @property address The unique Bluetooth address of the Movesense device.
 * @property name The name of the Movesense device.
 * @property isConnected Boolean indicating if the Movesense device is currently connected.
 */
@Entity(tableName = "movesense")
data class Movesense(
    @PrimaryKey(autoGenerate = false)
    val address: String,
    @ColumnInfo(name = "name_device")
    val name: String,
    @ColumnInfo(name = "status")
    val isConnected: Boolean
)


/**
 * Entity class representing accelerometer data in the database.
 *
 * @property id The unique identifier of the accelerometer record, auto-generated by the database.
 * @property xAxis The X-axis acceleration data.
 * @property yAxis The Y-axis acceleration data.
 * @property zAxis The Z-axis acceleration data.
 * @property timestamp The timestamp of the accelerometer data in milliseconds.
 * @property isSent Boolean indicating if the accelerometer data has been sent to the server.
 */
@Entity(tableName = "accelerometer")
data class Accelerometer(
    @PrimaryKey(autoGenerate = true)
    val id: Int = 0,
    @ColumnInfo(name = "x_axis")
    val xAxis: String,
    @ColumnInfo(name = "y_axis")
    val yAxis: String,
    @ColumnInfo(name = "z_axis")
    val zAxis: String,
    @ColumnInfo(name = "timestamp")
    val timestamp: Long,
    @ColumnInfo(name = "is_sent")
    val isSent: Boolean = false
)

/**
 * Data class representing the JSON structure of an accelerometer record.
 *
 * @property id The unique identifier of the accelerometer record.
 * @property xAxis The X-axis acceleration data.
 * @property yAxis The Y-axis acceleration data.
 * @property zAxis The Z-axis acceleration data.
 * @property timestamp The timestamp of the accelerometer data in milliseconds.
 */
data class AccelerometerJson(
    val id: Int = 0,
    val xAxis: String,
    val yAxis: String,
    val zAxis: String,
    val timestamp: Long
)
/**
 * Extension function to convert an [Accelerometer] object to an [AccelerometerJson] object.
 *
 * @param id The unique identifier of the accelerometer record, default is 0.
 * @return The [AccelerometerJson] representation of the accelerometer record.
 */
fun Accelerometer.toAccelerometerFirebase(id: Int = 0): AccelerometerJson =
    AccelerometerJson(id, xAxis, yAxis, zAxis, timestamp)
